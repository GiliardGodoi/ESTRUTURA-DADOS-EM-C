# To do list

## Main tasks

### PSO

[x] Implementar um versão básica do **PSO**
    [x] Implementar uma classe *Particle*
    [x] Implementar uma classe SearchSpace para representar o espaço de busca
[x] Implementar estratégia de atualização da velocidade
    [x] Baseado em *Design Patterns Stratagy*
    [x] Estratégia *default* da literatura
    [x] Baseado em redução linear do parâmetro w
[x] Implementar estratégia para atualização da posição da particula
    [x] Atualização *default* encontrada na literatura
    [x] Baseado na média da velocidade da particula: essa classe também ficará responsável por calcular a média e o desvio médio da velocidade das particulas
[x] Decidir/ Implementar a forma como estes strategies serão alternados: no construtor do *SearchSpace* será passado um parâmetro para o tipo de estratégia que será adotado; o método *setup* instancia o tipo de estratégia de acordo com estes parâmetros; o método *setup* é chamado no inicializador do objeto.
[] Decidir quais informações serão interessantes para analisar o log das simulações
[] Implementar um modo de medir o tempo de execução das buscas

#### Refactoring

[] Limitar o valor das velocidades
[x] Printar a estratégia correta, mesmo que se passe uma estratégia inexistente (de uma maneira porca, mas tá ai)
[x] Definir os parâmetros das estratégias a partir do arquivo main.py
[x] Definir as estratégias de atualização a partir do arquivo main.py
[x] Colocar o módulo pso em um pacote (diretorio) separado
[x] Refatorar a estratégia de atualização da posição baseada na media da velocidade
[x] Refatorar *LinearReduction* para operar de forma apropriada.
[x] Refatorar o *ConstrictionFactor* para operarem apropriadamente:
[x] Passar os argumentos que cada estratégia necessita no respectivo construtor: correção de um erro de codificação ao instanciar a estratégia apropriada: o certo é fazer strategy == "ESTRATEGIA" e não utilizar o operador is aqui
[x] Refatorar as funções de *benchmark* utilizadas
[x] Adicionar a propriedade __len__ a particle
[x] Limitar a posição das partículas para o espaço de busca definido: responsabilidade do SearchSpace? Who cares?
[x] Passar as funções de benchmark para um arquivo em separado
[x] SearchSpace será responsável por atualizar a posição e velocidade das partículas e decidirá qual estratégia **utilizar**
[x] Calcular a velocidade média e desvio médio (de acordo com o artigo) na classe de atualização pela média das velocidades

## Genetic Algorithm

[] Decidir qual a codificação para o chromosomo:
    - binário:
        - maior diversidade dado que temos poucos parâmetros: c1, c2, c3, w, 
        - limitação dos valores continuos a serem trabalhados
    - real
        - poucos gentes -> pouca diversidade
        - conjunto maior de possibilidades

[x] Implementar a classe Chromosome
[x] Implementar as operações sobre o cromossomo
[] Implementar o cenário para otmiziação da função dejong